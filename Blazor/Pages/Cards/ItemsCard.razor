@page "/ItemsCard/{itemLocation}"
@using Blazor.Data
@using Entities.Models
@using System.Threading

@inject DialogService DialogService
@inject IItemLocationHandler _itemLocationHandler

@if (_itemLocations == null)
{
    <p>Loading...........</p>
}
else if (!_itemLocations.Any())
{
    <p>No Locations ;(</p>
}
else
{
    <RadzenCard Style="margin-bottom: 20px;">
        <div class="row">
            <div class="col-md-12">
                <h3>Item Details</h3>
                <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                Data="@_itemLocations" TItem="ItemLocation" ColumnWidth="200px">
                    <Columns>
                        <RadzenDataGridColumn TItem="ItemLocation" Property="Item.ItemName" Title="Item Name"/>
                        <RadzenDataGridColumn TItem="ItemLocation" Property="Amount" Title="Amount"/>
                        <RadzenDataGridColumn TItem="ItemLocation" Property="Item.Length" Title="Length"/>
                        <RadzenDataGridColumn TItem="ItemLocation" Property="Item.Width" Title="Width"/>
                        <RadzenDataGridColumn TItem="ItemLocation" Property="Item.Height" Title="Height"/>
                        <RadzenDataGridColumn TItem="ItemLocation" Property="Item.Weight" Title="Weight"/>
                    </Columns>
                </RadzenDataGrid>
            </div>
        </div>
    </RadzenCard>
}


@code {
    private IList<ItemLocation> _itemLocations;

    [Parameter]
    public ItemLocation itemLocation { set; get; }

    protected override async Task OnInitializedAsync()
    {
        _itemLocations = await _itemLocationHandler.GetAllByLocationIdAsync(itemLocation);
        
        /*
        foreach (var itemLocationlocation in _itemLocations)
        {
            Console.WriteLine(itemLocationlocation);
        }
        */
    }

}