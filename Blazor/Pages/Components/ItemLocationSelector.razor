@page "/ItemLocationSelector"
@using Entities.Models
@using Blazor.Data
@namespace ItemLocationSelectorComponent

@inject IInventoryHandler _inventoryHandler
@inject NavigationManager _navigationManager
<h3>InventorySelector</h3>
@if (IsDisabled)
{
    <p>-----------------------</p>
}
else
{
    <div class="row">
        <div class="col-xl-6 mb-5">
            <h5>Item</h5>
            <RadzenDropDownDataGrid PageSize="15" TValue="Inventory" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    FilterOperator="StringFilterOperator.Contains"
                                    AllowFiltering="true" AllowClear="false" Placeholder="Select"
                                    Data="@_inventories" TextProperty="Item.ItemName" Change=@(OnInventoryChange) Style="width:100%"
                                    AllowFilteringByAllStringColumns="true" ShowPagingSummary="@showPagerSummary" PagingSummaryFormat="@pagingSummaryFormat">
                <Columns>

                    @{
                        if (ShowLocationDetail)
                        {
                            <RadzenDropDownDataGridColumn Property="Location.Description" Title="Location"/>
                        }

                        if (ShowItemDetails)
                        {
                            <RadzenDropDownDataGridColumn Property="Item.ItemName" Title="Item"/>
                        }
                    }


                    <RadzenDropDownDataGridColumn Property="Amount" Title="Amount"/>

                </Columns>
            </RadzenDropDownDataGrid>
        </div>
        <div class="col-md-2 mb-5">
            <h5>Amount</h5>
            <RadzenNumeric TValue="int" Min="0" Max="_maxValue" Change=@(OnAmountChange)></RadzenNumeric>
        </div>
    </div>
}


@code {

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public bool ShowLocationDetail { get; set; }
    
    [Parameter]
    public bool ShowItemDetails { get; set; }
    
    [Parameter]
    public int ItemId { get; set; }

    [Parameter]
    public EventCallback<Inventory> InventoryChange { get; set; }

    [Parameter]
    public EventCallback<int> AmountChange { get; set; }


    private IList<Inventory> _inventories;
    private int _amount;
    private int _maxValue;

    string pagingSummaryFormat = "Page {0} of {1}";
    bool showPagerSummary = true;

    protected override async Task OnInitializedAsync()
    {
        if (ItemId != 0)
        {
            _inventories = await _inventoryHandler.GetAllByItemIdAsync(ItemId);
            return;
        } 
        
        _inventories = await _inventoryHandler.GetInventoryStockAsync();
    }

    private void OnInventoryChange(object value)
    {
        Inventory inventory = (Inventory) value;
        _maxValue = inventory.Amount;
        InventoryChange.InvokeAsync(inventory);
    }


    private void OnAmountChange(int amount)
    {
        AmountChange.InvokeAsync(amount);
    }

}