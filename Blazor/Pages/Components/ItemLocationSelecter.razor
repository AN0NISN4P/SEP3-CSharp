@page "/ItemLocationSelecter"
@using Entities.Models
@using Blazor.Data
@namespace ItemLocationSelecterComponent

@inject IInventoryHandler _inventoryHandler
@inject NavigationManager _navigationManager
<h3>InventorySelecter</h3>

<div class="row">
    <div class="col-xl-6 mb-5">
        <h5>Item and location id</h5>
        <RadzenDropDownDataGrid PageSize="15" TValue="Inventory" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                FilterOperator="StringFilterOperator.Contains"
                                AllowFiltering="true" AllowClear="false" Placeholder="Select"
                                Data="@_inventories" TextProperty="Item.ItemName" Change=@(args => OnChange(args, "Inventory")) Style="width:100%"
                                AllowFilteringByAllStringColumns="true" ShowPagingSummary="@showPagerSummary" PagingSummaryFormat="@pagingSummaryFormat">
            <Columns>

                @{
                    if (showLocationDetail)
                    {
                        <RadzenDropDownDataGridColumn Property="Location.Description" Title="Location"/>
                        <RadzenDropDownDataGridColumn Property="Location.Id" Title="Location Id"/>
                    }
                }
                <RadzenDropDownDataGridColumn Property="Item.ItemName" Title="Item"/>
                <RadzenDropDownDataGridColumn Property="Amount" Title="Amount"/>
            </Columns>
        </RadzenDropDownDataGrid>
    </div>
    <div class="col-md-2 mb-5">
        <h5>Amount</h5>
        <RadzenNumeric TValue="int" Min="0" Max="_maxValue" Change=@(args => OnChange(args, "amount"))></RadzenNumeric>
    </div>
</div>


@code {

    [Parameter]
    public bool showLocationDetail { get; set; }

    private IList<Inventory> _inventories;
    private int _amount;
    private int _maxValue;

    string pagingSummaryFormat = "Page {0} of {1}";
    bool showPagerSummary = true;

    protected override async Task OnInitializedAsync()
    {
        _inventories = await _inventoryHandler.GetAllAsync();
    }

    void OnChange(object value, string name)
    {
        if (name.Equals("Inventory"))
        {
            Console.WriteLine("selected inventory " + value);

    /*
            _oldInventory = (Inventory) value;
            _maxValue = _oldInventory.Amount;
            Console.WriteLine($"+++ OldItemLocation.Id - {_oldInventory.Id}");
            Console.WriteLine($"-Printing Item from Item Location: {_oldInventory.Item}");
            Console.WriteLine($"-Printing Amount from Item Location: {_oldInventory.Amount}");
            _newInventory.Item = _oldInventory.Item;
            _newInventory.Amount = _oldInventory.Amount;
            _newInventory.Id = _oldInventory.Id;
*/
        }
        else if (name.Equals("amount"))
        {
            _amount = (int) value;
        }
    }


}