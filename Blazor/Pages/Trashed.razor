@page "/Trashed"
@using Entities.Models
@using Blazor.Pages.Cards
@using Blazor.Data

@inject IInventoryHandler _inventoryHandler
@inject DialogService DialogService

<h3>Trashed</h3>

@if (_itemLocationsTrashed == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!_itemLocationsTrashed.Any())
{
    <p>
        <em>No registered locations exist. Please add some.</em>
    </p>
}
else
{
    <RadzenDataGrid Data="@_itemLocationsTrashed" TItem="Inventory" AllowFiltering="true" FilterMode="FilterMode.Simple"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    AllowSorting="true" PageSize="15" AllowPaging="true" AllowColumnResize="true"
                    ShowPagingSummary="@showPagerSummary" PagingSummaryFormat="@pagingSummaryFormat">
        <Columns>
            <RadzenDataGridColumn TItem="Inventory" Context="data" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
                <Template Context="data">
                    <RadzenButton Icon="info" Size="ButtonSize.Small" Class="formButton m-1"
                                  Click="@(() => OpenLocationWithItems(data))" @onclick:stopPropagation="true"/>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Inventory" Property="Item.Id" Title="Item ID" SortOrder="SortOrder.Ascending"/>
            <RadzenDataGridColumn TItem="Inventory" Property="Item.ItemName" Title="Item Name"/>
        </Columns>
    </RadzenDataGrid>
}

@code {
    private IList<Inventory> _itemLocations;
    private IList<Inventory> _itemLocationsTrashed;

    string pagingSummaryFormat = "Displaying page {0} of {1} (total {2} records)";
    bool showPagerSummary = true;

    protected override async Task OnInitializedAsync()
    {
        _itemLocations = await _inventoryHandler.GetAllAsync();
        SortTrashed();
        DialogService.OnOpen += Open;
        DialogService.OnClose += Close;
    }

    private void SortTrashed()
    {
        _itemLocationsTrashed = new List<Inventory>();
        foreach (var itemLocation in _itemLocations)
        {
            if (itemLocation.Location.Id == 1)
            {
                _itemLocationsTrashed.Add(itemLocation);
            }
        }
    }

    async Task OpenLocationWithItems(Inventory inventory)
    {
        await DialogService.OpenAsync<LocationsCard>($"\nItem Name: {inventory.Item.ItemName}" +
                                                     $"Item Id {inventory.Item.Id}",
            new Dictionary<string, object>() {{"Inventory", inventory}},
            new DialogOptions()
            {
                Width = "700px", Height = "530px",
                CloseDialogOnOverlayClick = true, Resizable = true
            });
    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        Console.WriteLine("Dialog Opened");
    }

    void Close(dynamic result)
    {
        Console.WriteLine("Dialog closed");
    }

}