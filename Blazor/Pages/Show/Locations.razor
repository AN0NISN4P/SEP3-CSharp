@page "/Locations"
@using Entities.Models
@using Blazor.Data
@using Blazor.Pages.Cards

@inject IItemLocationHandler _itemLocationHandler
@inject DialogService DialogService

<h2>Locations</h2>

<RadzenDataGrid Data="@_itemLocations" TItem="ItemLocation" AllowFiltering="true" FilterMode="FilterMode.Simple"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                LogicalFilterOperator="LogicalFilterOperator.Or"
                AllowSorting="true" PageSize="15" AllowPaging="true" AllowColumnResize="true">
    <Columns>
        <RadzenDataGridColumn TItem="ItemLocation" Property="Location.Description" Title="Location Description">
            <Template Context="data">
                <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="info" Class="formButton" Click=@(() => OpenItemWithLocations(data)) Text="@data.Location.Description.ToString()"/>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ItemLocation" Property="Item.ItemName" Title="Item Name"/>
    </Columns>
</RadzenDataGrid>


@code {
    private IList<ItemLocation> _itemLocations;

    protected override async Task OnInitializedAsync()
    {
        _itemLocations = await _itemLocationHandler.GetAllAsync();

        DialogService.OnOpen += Open;
        DialogService.OnClose += Close;
    }

    async Task OpenItemWithLocations(ItemLocation itemLocation)
    {
        await DialogService.OpenAsync<ItemsCard>($"Location: {itemLocation.Location.Description}",
            new Dictionary<string, object>() {{"ItemLocation", itemLocation}},
            new DialogOptions() {Width = "1000px", Height = "530px"});
    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        Console.WriteLine("Dialog Opened");
    }

    void Close(dynamic result)
    {
        Console.WriteLine("Dialog closed");
    }
}