@page "/Items"
@using Blazor.Data
@using Blazor.Pages.Cards
@using Entities.Models

@inject IItemLocationHandler _itemLocationHandler
@inject DialogService DialogService

<h2>Items</h2>

<RadzenDataGrid Data="@_itemLocations" TItem="ItemLocation" AllowFiltering="true" FilterMode="FilterMode.Simple"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                LogicalFilterOperator="LogicalFilterOperator.Or"
                AllowSorting="true" PageSize="15" AllowPaging="true" AllowColumnResize="true"
                ShowPagingSummary="@showPagerSummary" PagingSummaryFormat="@pagingSummaryFormat">
    <Columns>
        <RadzenDataGridColumn TItem="ItemLocation" Property="Item.Id" Title="Item ID" SortOrder="SortOrder.Ascending">
            <Template Context="data">
                <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="info" Class="formButton" Click=@(() => OpenLocationWithItems(data)) Text="@data.Item.Id.ToString()"/>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ItemLocation" Property="Item.ItemName" Title="Item Name"/>
        <RadzenDataGridColumn TItem="ItemLocation" Property="Location.Description" Title="Locations"/>
    </Columns>
</RadzenDataGrid>


@code {
    private IList<ItemLocation> _itemLocations;
    //private IList<Item> _registeredItems;

    string pagingSummaryFormat = "Displaying page {0} of {1} (total {2} records)";
    bool showPagerSummary = true;

    protected override async Task OnInitializedAsync()
    {
        _itemLocations = await _itemLocationHandler.GetAllAsync();
    //_registeredItems = await _itemsHandler.GetAllAsync();
        
        DialogService.OnOpen += Open;
        DialogService.OnClose += Close;
    }

    async Task OpenLocationWithItems(ItemLocation itemLocation)
    {
        await DialogService.OpenAsync<LocationsCard>($"\nItem Name: {itemLocation.Item.ItemName}" +
                                                     $"Item Id {itemLocation.Item.Id}",
            new Dictionary<string, object>() {{"ItemLocation", itemLocation}},
            new DialogOptions() {Width = "700px", Height = "530px"});
    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        Console.WriteLine("Dialog Opened");
    }

    void Close(dynamic result)
    {
        Console.WriteLine("Dialog closed");
    }

}