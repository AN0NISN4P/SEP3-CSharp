@page "/MoveItems"
@using Blazor.Data
@using Entities.Models

@inject ILocationHandler _locationsHandler
@inject IItemLocationHandler _itemLocationHandler
@inject NavigationManager _navigationManager

@inject DialogService DialogService

<h3>MoveItems</h3>

<div class="row">
    <div class="col-xl-10">
        <div class="row">
            <div class="col-xl-6 mb-5">
                <h5>Item and location id</h5>
                <RadzenDropDownDataGrid PageSize="15" TValue="ItemLocation" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains"
                                        AllowFiltering="true" AllowClear="true" Placeholder="Select"
                                        Data="@_itemLocations" TextProperty="Item.ItemName" Change=@(args => OnChange(args, "ItemLocation")) Style="width:100%">
                    <Columns>
                        <RadzenDropDownDataGridColumn Property="Location.Description" Title="Location"/>
                        <RadzenDropDownDataGridColumn Property="Location.Id" Title="Location Id"/>
                        <RadzenDropDownDataGridColumn Property="Item.ItemName" Title="Item"/>
                        <RadzenDropDownDataGridColumn Property="Amount" Title="Amount"/>
                        <RadzenDropDownDataGridColumn Property="Id" Title="Id"/>
                    </Columns>
                </RadzenDropDownDataGrid>
            </div>
        </div>
        <div class="row">
            <div class="col-xl-6 mb-5">
                <h5>Registered Locations</h5>
                <RadzenDropDownDataGrid PageSize="15" TValue="Location" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains"
                                        AllowFiltering="true" AllowClear="true" Placeholder="Select"
                                        Data="@_locations" TextProperty="Description" Change=@(args => OnChange(args, "Location")) Style="width:100%">
                    <Columns>
                        <RadzenDropDownDataGridColumn Property="Id" Title="Description Id"/>
                        <RadzenDropDownDataGridColumn Property="Description" Title="Description"/>
                    </Columns>
                </RadzenDropDownDataGrid>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4 mb-5">
                <h5>Add to location</h5>
                <RadzenButton Icon="save" Text="Save" Click="@Save"/>
            </div>
        </div>

    </div>
</div>

@code {
    private IList<Location> _locations;
    private IList<ItemLocation> _itemLocations;

    private ItemLocation _newItemLocation;
    private ItemLocation _oldItemLocation;


    protected override async Task OnInitializedAsync()
    {
        _itemLocations = await _itemLocationHandler.GetAllAsync();
        _locations = await _locationsHandler.GetAllAsync();

        Console.WriteLine("count of itemlocations : " + _itemLocations.Count);

        _newItemLocation = new();
        _oldItemLocation = new();

        DialogService.OnOpen += Open;
        DialogService.OnClose += CloseConfirmAdd;
    }

    private async Task Save()
    {
        Console.WriteLine($"-----------------Printing Location: /n {_newItemLocation}-------------------------");

        await _itemLocationHandler.UpdateAsync(_newItemLocation);


    //_navigationManager.NavigateTo("/");
    }

    void OnChange(object value, string name)
    {
    //Kig i AddItem page for hvordan det er gjort der

        Console.WriteLine($"value is: {value}");
        Console.WriteLine($"name is: {name}");

        if (name.Equals("ItemLocation"))
        {
            _oldItemLocation = (ItemLocation) value;
            Console.WriteLine($"+++ OldItemLocation.Id - {_oldItemLocation.Id}");
            Console.WriteLine($"-Printing Item from Item Location: {_oldItemLocation.Item}");
            Console.WriteLine($"-Printing Amount from Item Location: {_oldItemLocation.Amount}");
            _newItemLocation.Item = _oldItemLocation.Item;
            _newItemLocation.Amount = _oldItemLocation.Amount;
            _newItemLocation.Id = _oldItemLocation.Id;

            Console.WriteLine($"++++ NewItemLocation.Id - {_newItemLocation.Id}");
        }
        else if (name.Equals("Location"))
        {
            Location location = (Location) value;
            _newItemLocation.Location = location;
        }
    }


    void CloseConfirmAdd(dynamic result)
    {
        if (result != null) // if the user hits the x near the top right null is returned
        {
    // result is false if the user clicks no
            if ((bool) result) Save();
        }
    }

    public void Dispose()
    {
    // The DialogService is a singleton so it is advisable to unsubscribe.??? den er scoped i startup 
        DialogService.OnOpen -= Open;
        DialogService.OnClose -= CloseConfirmAdd;
    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        Console.WriteLine("Dialog opened");
    }

    void Close(dynamic result)
    {
        Console.WriteLine($"Dialog closed {result}");
    }

}