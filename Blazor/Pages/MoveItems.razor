@page "/MoveItems"
@using Blazor.Data
@using Entities.Models

@inject ILocationHandler _locationsHandler
@inject IItemLocationHandler _itemLocationHandler
@inject NavigationManager _navigationManager


<h3>MoveItems</h3>

<div class="row">
    <div class="col-xl-10">
        <div class="row">
            <div class="col-xl-6 mb-5">
                <h5>Item and location id</h5>
                <RadzenDropDownDataGrid TValue="ItemLocation" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains"
                                        AllowFiltering="true" AllowClear="true" AllowVirtualization="true" Placeholder="Select"
                                        Data="@_itemLocations" TextProperty="Item.ItemName" Change=@(args => OnChange(args, "ItemLocation")) Style="width:100%">
                    <Columns>
                        <RadzenDropDownDataGridColumn Property="Location.Description" Title="Location"/>
                        <RadzenDropDownDataGridColumn Property="Location.Id" Title="Location Id"/>
                        <RadzenDropDownDataGridColumn Property="Item.ItemName" Title="Item"/>
                        <RadzenDropDownDataGridColumn Property="Amount" Title="Amount"/>
                        <RadzenDropDownDataGridColumn Property="Id" Title="Id"/>
                    </Columns>
                </RadzenDropDownDataGrid>
            </div>
        </div>
        <div class="row">
            <div class="col-xl-6 mb-5">
                <h5>Registered Locations</h5>
                <RadzenDropDownDataGrid TValue="Location" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains"
                                        AllowFiltering="true" AllowClear="true" AllowVirtualization="true" Placeholder="Select"
                                        Data="@_locations" TextProperty="Description" Change=@(args => OnChange(args, "Location")) Style="width:100%">
                    <Columns>
                        <RadzenDropDownDataGridColumn Property="Id" Title="Description Id"/>
                        <RadzenDropDownDataGridColumn Property="Description" Title="Description"/>
                    </Columns>
                </RadzenDropDownDataGrid>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4 mb-5">
                <h5>Add to location</h5>
                <RadzenButton Icon="save" Text="Save" Click="@Save"/>
            </div>
        </div>

    </div>
</div>

@*
<RadzenDataGrid Data="@_itemLocations" TItem="ItemLocation" AllowFiltering="true" FilterMode="FilterMode.Simple"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                LogicalFilterOperator="LogicalFilterOperator.Or"
                AllowSorting="true" PageSize="15" AllowPaging="true" AllowColumnResize="true">
    <Columns>
        <RadzenDataGridColumn TItem="ItemLocation" Property="Location.Description" Title="Location"/>
        <RadzenDataGridColumn TItem="ItemLocation" Property="Item.ItemName" Title="Item"/>
        <RadzenDataGridColumn TItem="ItemLocation" Property="Amount" Title="Amount"/>
    </Columns>
</RadzenDataGrid>*@

@code {
    private IList<Location> _locations;
    private IList<ItemLocation> _itemLocations;

    private ItemLocation _newItemLocation;
    private ItemLocation _oldItemLocation;

    
    protected override async Task OnInitializedAsync()
    {
        _locations = await _locationsHandler.GetLocations();
        _itemLocations = await _itemLocationHandler.GetItemLocations();

        _newItemLocation = new();
        _oldItemLocation = new();
    }

    private async Task Save()
    {
        Console.WriteLine($"-----------------Printing Location: /n {_newItemLocation}-------------------------");
        
        await _itemLocationHandler.UpdateItemLocation(_newItemLocation);
        
        

        //_navigationManager.NavigateTo("/");
    }

    void OnChange(object value, string name)
    {
    //Kig i AddItem page for hvordan det er gjort der
        
        Console.WriteLine($"value is: {value}");
        Console.WriteLine($"name is: {name}");

        if (name.Equals("ItemLocation"))
        {
            _oldItemLocation = (ItemLocation) value;
            Console.WriteLine($"+++ OldItemLocation.Id - {_oldItemLocation.Id}");
            Console.WriteLine($"-Printing Item from Item Location: {_oldItemLocation.Item}");
            Console.WriteLine($"-Printing Amount from Item Location: {_oldItemLocation.Amount}");
            _newItemLocation.Item = _oldItemLocation.Item;
            _newItemLocation.Amount = _oldItemLocation.Amount;
            _newItemLocation.Id = _oldItemLocation.Id;

            Console.WriteLine($"++++ NewItemLocation.Id - {_newItemLocation.Id}");
        }
        else if (name.Equals("Location"))
        {
            Location location = (Location) value;
            _newItemLocation.Location = location;
        }
    }

}